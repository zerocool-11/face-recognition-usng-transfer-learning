# -*- coding: utf-8 -*-
"""face_recognioton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_z0N06KPT4SKc2v8sjOz7Be-pmK1kEDl
"""



from google.colab import drive
drive.mount('/content/drive')

!cp /content/drive/My\ Drive/Colab\ Notebooks/Student\ Queries/dataset-20200623T112641Z-001.zip /content/dataset.zip

!unzip dataset.zip

from keras.applications import MobileNet

# MobileNet was designed to work on 224 x 224 pixel input images sizes
img_rows, img_cols = 224, 224 

# Re-loads the MobileNet model without the top or FC layers
MobileNet = MobileNet(weights = 'imagenet', 
                 include_top = False, 
                 input_shape = (img_rows, img_cols, 3))

# Here we freeze the last 4 layers 
# Layers are set to trainable as True by default
for layer in MobileNet.layers:
    layer.trainable = False
    
# Let's print our layers 
for (i,layer) in enumerate(MobileNet.layers):
    print(str(i) + " "+ layer.__class__.__name__, layer.trainable)

def lw(bottom_model, num_classes):
    """creates the top or head of the model that will be 
    placed ontop of the bottom layers"""

    top_model = bottom_model.output
    top_model = Flatten()(top_model)
    top_model = Dense(1024,activation='relu')(top_model)
    top_model = Dense(512,activation='relu')(top_model)
    top_model = Dense(256,activation='relu')(top_model)
    top_model = Dense(num_classes,activation='softmax')(top_model)
    return top_model

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, GlobalAveragePooling2D
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.layers.normalization import BatchNormalization
from keras.models import Model

# Set our class number to 3 (Young, Middle, Old)
num_classes =2

FC_Head = lw(MobileNet, num_classes)

model = Model(inputs = MobileNet.input, outputs = FC_Head)

print(model.summary())

from keras.preprocessing.image import ImageDataGenerator

train_data_dir = '/content/dataset/train/'
validation_data_dir = '/content/dataset/test/'

# Let's use some data augmentaiton 
train_datagen = ImageDataGenerator(
      rescale=1./255,
      rotation_range=45,
      width_shift_range=0.3,
      height_shift_range=0.3,
      horizontal_flip=True)
 
validation_datagen = ImageDataGenerator(rescale=1./255)
 
# set our batch size (typically on most mid tier systems we'll use 16-32)
batch_size = 32
 
train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(img_rows, img_cols),
        batch_size=batch_size,
        class_mode='categorical')
 
validation_generator = validation_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(img_rows, img_cols),
        batch_size=batch_size,
        class_mode='categorical')

train_generator.class_indices

from keras.optimizers import RMSprop
from keras.callbacks import ModelCheckpoint, EarlyStopping

                     


# We use a very small learning rate 
model.compile(loss = 'categorical_crossentropy',
              optimizer = RMSprop(lr = 0.00001),
              metrics = ['accuracy'])

# Enter the number of training and validation samples here
nb_train_samples = 250
nb_validation_samples = 1222

# We only train 5 EPOCHS 
epochs = 5
batch_size = 16

history = model.fit_generator(
    train_generator,
    steps_per_epoch = nb_train_samples, 
    epochs = epochs,
    validation_data = validation_generator,
    validation_steps=nb_validation_samples // batch_size)

model.save('yash_opt-rms_2class_category.h5')



from keras.models import load_model

classifier = load_model('yash_opt-rms_2class_category.h5')

from keras.preprocessing import image
import numpy as np

from keras.preprocessing import image
import numpy as np

testc= image.load_img('/content/dataset/test/cats/cat.4008.jpg',target_size=(224,224))
testy = image.load_img('/content/dataset/test/yash/image101.jpg', target_size=(224, 224))

testy=image.img_to_array(testy)
testy= np.expand_dims(testy, axis=0)


np.argmax(classifier.predict(testc, 1, verbose = 0),axis=0)

testc.shape
testy.shape

c=classifier.predict(testc)
y=classifier.predict(testy)

human = Face_detection_dict[str(pred)]

classifier.predict(test, 1, verbose = 0)

x=

x.shape

print(c,'\n\n', y)

np.set_printoptions(suppress=True)

import  cv2

cv2.imread('/content/dataset/test/cats/cat.4008.jpg')[:2,:2]

timg[:2,:2]

!free -mh



